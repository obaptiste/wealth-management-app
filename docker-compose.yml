
services:
  # Database Service
  db:
    image: postgres:13-alpine
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PYTHONPATH=/app # Required for alembic
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      app_network:
        aliases:
          - database 
   # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Backend Service
  wealth_backend:
    build:
      context: ./backend
      dockerfile: dockerfile
    container_name: wealth_backend
    ports:
      - "8000:8000"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:8000/health || exit 1
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 15s
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - model_data:/app/models
      - scripts:/app/scripts
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
    container_name: wealth_frontend
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://wealth_backend:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      wealth_backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

volumes:
  postgres_data:
  model_data:
  scripts:

networks:
  app_network:
    driver: bridge